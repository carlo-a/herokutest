app.controller('BubbleUpdateController', function ($mdSidenav, $scope, $mdDialog, callstate, DataFactory, $filter, svg, toms, TabularFactory, modalData) {
    //Variables
    $scope.SVG = svg;// .SVG;               //getting svg items from config
    $scope.callstate = callstate;           //create state or update state of modal
    $scope.modalTitle = "";                 //determines Create or Update
    $scope.modalSubtitle = "";              //subtitle depending on which step
    $scope.formLoad = false;                //Load State

    //Raw Data
    $scope.originalData = undefined;        //raw data from webservice & Variable for Factory Processing [DataFactory.GenerateTabularRawSeries(obj,obj,obj) - 3rd argument]
    $scope.originalDataKeys = [];           //Keys derived from raw data (originalData)

    //Data
    $scope.refreshInfo = modalData.refreshInfo;
    $scope.widgetInfo = modalData.widgetInfo;
    $scope.tabularInfo = modalData.tabularInfo;
    $scope.chartInfo = modalData.chartInfo;
    $scope.graphdata = {};

    // Variable for Wizard Step State
    $scope.WizardSteps = [
        { id: 1, icon: $scope.SVG.s1, desc: "Identify your Data Source", tooltip: "Identify your data source to get hold of all the data we need to create our widget.", done: false },
        { id: 2, icon: $scope.SVG.s2, desc: "Customize your Widget", tooltip: "Single out your widget's properties and behavior.", done: false },
        { id: 3, icon: $scope.SVG.s3, desc: "Format your Data", tooltip: "Isolate the data that you need to see in your graph and see how it looks as a graph.", done: false },
        { id: 4, icon: $scope.SVG.s4, desc: "Customize your Graph", tooltip: "Customize the graph generated by manipulating the chart's properties.", done: false },
        { id: 5, icon: $scope.SVG.laststep, desc: "Review your Widget", tooltip: "Review the widget generated from the data you selected and properties you customized.", done: false },
    ]

    // Creates The title of the modal
    $scope.CreateModalTitle = function () {
        //Creates the Modal Title depending on callstate [update || create]
        switch (callstate) {
            case "create": $scope.modalTitle = "Create your Widget"; break;
            case "update": $scope.modalTitle = "Reconfigure your Widget"; break;
            default: $scope.modalTitle = "You did something wrong.";
        }
        $scope.modalSubtitle = $scope.WizardSteps[0].tooltip;

        //Initializes the validationHistory from number of steps existing in WizardSteps
        angular.forEach($scope.WizardSteps, function (o, i) {
            $scope.validationHistory.push(false);
        })
        $scope.validationHistory[1] = true;
    }

    $scope.validationHistory = [];
    $scope.wizard = {
        currStep: 1,
        nextValid: false,
        advanced: false,
        load: false
    }

    $scope.toggleFlags = []
    $scope.ToggleFlag = function (index) {
        $scope.toggleFlags[index] = !$scope.toggleFlags[index];
    }

    $scope.chartTypes = [{ name: "Line", value: 'line' }, { name: "Scatter", value: 'scatter' }, { name: "Column", value: 'column' }, { name: "Spline", value: 'spline' }, { name: "Area", value: 'area' }, { name: "Areaspline", value: 'areaspline' }]
    $scope.stackingType = [{ name: 'None', value: '' }, { name: 'Percentage', value: 'percent' }, { name: 'Normal', value: 'normal' }]
    $scope.lineStyles = ['Solid', 'Dot', 'Dash', 'ShortDash', 'LongDash']
    $scope.markersSymbol = ['circle', 'square', 'diamond', 'triangle', 'triangle-down'];

    $scope.dataSelectTable = {
        col: 5,
        row: 4,
        colpage: 0,
        rowpage: 0,
        OpenFilter: function ($mdOpenMenu, ev) {
            originatorEv = ev;
            $mdOpenMenu(ev);
        },
        AddColumn: function () {
            this.col += 1;
        },
        AddRow: function () {
            this.row += 1;
        },
        MinusColumn: function () {
            this.col -= 1;
        },
        MinusRow: function () {
            this.row -= 1;
        }
    }

    $scope.customGraphTable = {
        header: ['color'],     //
        col: 5,
        row: 5,
        colpage: 0,
        rowpage: 0,
        OpenFilter: function ($mdOpenMenu, ev) {
            originatorEv = ev;
            $mdOpenMenu(ev);
        },
        AddColumn: function () {
            this.col += 1;
        },
        AddRow: function () {
            this.row += 1;
        },
        MinusColumn: function () {
            this.col -= 1;
        },
        MinusRow: function () {
            this.row -= 1;
        }
    }

    //Variable for Plot Band Mgt
    $scope.plotBand = {
        id: '',
        axis: 'x',
        rotation: 0,
        from: 0,
        to: 0,
        color: "#CCC",
        text: "Sample Plot Band",

        //defaults
        textAlign: 'center',
    }

    //Variable for Plot Line Mgt
    $scope.plotLine = {
        id: '',
        value: 0,
        width: 1,
        axis: 'x',
        color: "#CCC",
        dashStyle: 'Solid',
        text: 'Sample PlotLine',
        verticalAlign: 'Top',                 //top-middle-bottom,
        rotation: 0,

        //defaults
        textAlign: 'center',
        align: 'center'
    }

    $scope.CustomGraphSettings = [
        { name: "Graph Colors", active: true, id: 'color' },
        { name: "Line Width", active: false, id: 'lineWidth' },
        { name: "Line Style", active: false, id: 'dashStyle' },
        { name: "Marker Symbol", active: false, id: 'symbol' },
        { name: "Marker Radius", active: false, id: 'radius' },
    ];

    //Variable for Plot Band Mgt
    $scope.plotBand = {
        id: "",
        axis: 'x',
        rotation: 0,
        from: 0,
        to: 0,
        color: "#CCC",
        text: "Sample Plot Band",

        //defaults
        textAlign: 'center',
    }

    //Variable for Plot Line Mgt
    $scope.plotLine = {
        id: "",
        value: 0,
        width: 1,
        axis: 'x',
        color: "#CCC",
        dashStyle: 'Solid',
        text: 'Sample PlotLine',
        verticalAlign: 'Top',                 //top-middle-bottom,
        rotation: 0,

        //defaults
        textAlign: 'center',
        align: 'center'
    }


    $scope.GeneratePlotID = function () {
        var num = $scope.chartInfo.plotBands.x.length + $scope.chartInfo.plotBands.y.length + $scope.chartInfo.plotLines.x.length + $scope.chartInfo.plotLines.y.length;
        return "plot" + num.toString();
    }

    //Togglers
    $scope.ChangeDataKey = function (key) {
        //Change label name for graph plotting
        $scope.tabularInfo.columns = [];
        $scope.tabularInfo.rows = [];
        $scope.tabularInfo.label = key;
        $scope.GenerateHighchart();
        //if ($scope.tabularInfo.label == '') {
        //    $scope.tabularInfo.label = key;
        //    $scope.originalDataKeys.splice($scope.originalDataKeys.indexOf(key), 1)
        //} else {
        //    $scope.originalDataKeys.splice($scope.originalDataKeys.indexOf(key), 1)
        //    $scope.originalDataKeys.push($scope.tabularInfo.label);
        //    $scope.tabularInfo.label = key;
        //}
    }
    $scope.CheckSelectedData = function (obj) {
        //Checks if obj is existing in selected rows
        if ($scope.tabularInfo.rows.indexOf(obj) == -1) return false;
        else return true;
    }
    $scope.ToggleSelectedData = function (obj) {
        //Push|Pop obj in|from selected rows
        var key = $scope.tabularInfo.rows.indexOf(obj);
        if (key == -1) {
            $scope.tabularInfo.rows.push(obj);
            $scope.tabularInfo.color.push("");
            $scope.tabularInfo.symbol.push("");
            $scope.tabularInfo.radius.push(4);
        }
        else {
            $scope.tabularInfo.rows.splice(key, 1);
            $scope.tabularInfo.color.splice(key, 1);
            $scope.tabularInfo.symbol.splice(key, 1);
            $scope.tabularInfo.radius.splice(key, 1);
        }
        $scope.GenerateHighchart();
    }
    $scope.CheckSelectedKey = function (obj) {
        //Checks if obj is existing in selected columns
        if ($scope.chartInfo.type.toLowerCase() == 'bubble') {
            return obj == $scope.tabularInfo.columns.x || obj == $scope.tabularInfo.columns.y || obj == $scope.tabularInfo.columns.z;
        }
        else {
            return obj == $scope.tabularInfo.columns.x || obj == $scope.tabularInfo.columns.y;
        }
    }
    $scope.ToggleSelectedKey = function (obj) {
        //Push|Pop obj in|from selected columns
        var key = $scope.tabularInfo.columns.indexOf(obj);
        if (key == -1) {
            if ($scope.tabularInfo.columns.length < 3) {
                $scope.tabularInfo.columns.push(obj);
            }
        }
        else {
            $scope.tabularInfo.columns.splice(key, 1);
        }
        $scope.GenerateHighchart();
    }


    //PlotBands Managers
    $scope.AddPlotBand = function () {
        //Adds Plot Band
        $scope.plotLine.id = $scope.GeneratePlotID();
        if ($scope.plotBand.axis == 'x') {
            $scope.chartInfo.plotBands.x.push($scope.plotBand);
        } else {
            $scope.chartInfo.plotBands.y.push($scope.plotBand);
        }
        $scope.plotBand = {
            axis: 'x',
            id: "",
            rotation: 0,
            from: 0,
            to: 0,
            color: "#CCC",
            text: "Sample Plot Band",

            //defaults
            textAlign: 'center',
        }
        $scope.GenerateHighchart();
    }
    $scope.RemovePlotBand = function (o) {
        if (o.axis == 'x') {
            var i = $scope.chartInfo.plotBands.x.indexOf(o);
            $scope.chartInfo.plotBands.x.splice(i, 1);
        } else {
            var i = $scope.chartInfo.plotBands.y.indexOf(o);
            $scope.chartInfo.plotBands.y.splice(i, 1);
        }
        $scope.GenerateHighchart();
    }

    //PlotBands Managers
    $scope.AddPlotLine = function () {
        //Adds Plot Line
        $scope.plotLine.id = $scope.GeneratePlotID();
        if ($scope.plotLine.axis == 'x') {
            $scope.chartInfo.plotLines.x.push($scope.plotLine);
        } else {
            $scope.chartInfo.plotLines.y.push($scope.plotLine);
        }
        $scope.plotLine = {
            id: "",
            value: 0,
            width: 1,
            axis: 'x',
            color: "#CCC",
            dashStyle: 'Solid',
            text: 'Sample PlotLine',
            verticalAlign: 'Top',                 //top-middle-bottom,
            rotation: 0,

            //defaults
            textAlign: 'center',
            align: 'center'
        }
        $scope.GenerateHighchart();
    }
    $scope.RemovePlotLine = function (o) {
        if (o.axis == 'x') {
            var i = $scope.chartInfo.plotLines.x.indexOf(o);
            $scope.chartInfo.plotLines.x.splice(i, 1);
        } else {
            var i = $scope.chartInfo.plotLines.y.indexOf(o);
            $scope.chartInfo.plotLines.y.splice(i, 1);
        }
        $scope.GenerateHighchart();
    }

    $scope.ToMS = function (interval, type) {
        //Time Converter
        var converted;
        switch (type) {
            case "Second":
            case "Seconds":
                converted = interval * 1000;
                break;
            case "Minute":
            case "Minutes":
                converted = interval * 60000;
                break;
            case "Hour":
            case "Hours":
                converted = interval * 3600000;
                break;
        }
        return converted;
    }

    //Index Checkers
    $scope.GetIndexOf = function (o) {
        //Determines o's index in raw data
        return $scope.originalData.indexOf(o);
    }
    $scope.GetGraphIndexOf = function (o) {
        //Determines o's index in processed data of selected rows
        return $scope.tabularInfo.rows.indexOf(o);
    }

    //Get Data
    $scope.GetData = function () {
        $scope.loadState = true;
        $scope.originalData = {};
        $scope.originalDataKeys = {};
        DataFactory.GetData($scope.refreshInfo.url, $scope.refreshInfo.method).then(
            function successCallback(response) {
                $scope.originalData = response.data;
                $scope.originalDataKeys = Object.keys(response.data[0]);
                $scope.loadState = false;
                $scope.GenerateHighchart();
            }, function errorCallback(response) { });
    }

    //Graph Preview Generator
    $scope.GenerateHighchart = function () {
        if ($scope.tabularInfo.rows.length > 0) {
            var series = TabularFactory.BubbleFamily.GenerateSeries($scope.originalData, $scope.tabularInfo);
            $scope.graphdata = TabularFactory.BubbleFamily.GenerateChart($scope.chartInfo, $scope.tabularInfo, series);
            $scope.graphdata.chart.renderTo = "hcid";
        }
    }

    //Closes the modal
    $scope.CloseModal = function () {
        $mdDialog.hide();
    }

    //Update The Modal
    $scope.Update = function () {
        $scope.refreshInfo.interval.value = $scope.ToMS($scope.refreshInfo.interval.unit, $scope.refreshInfo.interval.type);
        $mdDialog.hide({
            refreshInfo: $scope.refreshInfo,
            widgetInfo: $scope.widgetInfo,
            tabularInfo: $scope.tabularInfo,
            chartInfo: $scope.chartInfo,
        });
    }


    $scope.GetData();
});
