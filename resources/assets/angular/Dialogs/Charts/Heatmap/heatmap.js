/* Line Family MODULE */
app.controller('HeatmapController', function ($mdSidenav, $scope, $mdDialog, callstate, DataFactory, $filter, svg, toms) {
    //Variables
    $scope.SVG = svg;// .SVG;               //getting svg items from config
    $scope.callstate = callstate;           //create state or update state of modal
    $scope.modalTitle = "";                 //determines Create or Update
    $scope.modalSubtitle = "";              //subtitle depending on which step
    $scope.formLoad = false;                //Load State

    //Raw Data
    $scope.originalData = undefined;        //raw data from webservice & Variable for Factory Processing [DataFactory.GenerateTabularRawSeries(obj,obj,obj) - 3rd argument]
    $scope.originalDataKeys = [];           //Keys derived from raw data (originalData)

    // Variable for Wizard Step State
    $scope.WizardSteps = [
        { id: 1, icon: $scope.SVG.s1, desc: "Identify your Data Source", tooltip: "Identify your data source to get hold of all the data we need to create our widget.", done: false },
        { id: 2, icon: $scope.SVG.s2, desc: "Customize your Widget", tooltip: "Single out your widget's properties and behavior.", done: false },
        { id: 3, icon: $scope.SVG.s3, desc: "Format your Data", tooltip: "Isolate the data that you need to see in your graph and see how it looks as a graph.", done: false },
        { id: 4, icon: $scope.SVG.s4, desc: "Customize your Graph", tooltip: "Customize the graph generated by manipulating the chart's properties.", done: false },
        { id: 5, icon: $scope.SVG.laststep, desc: "Review your Widget", tooltip: "Review the widget generated from the data you selected and properties you customized.", done: false },
    ]

    $scope.gradientPoints = [{
            color : "#ff0000",
            position: 0
        },
        {
            color: "#ffff00",
            position: 1
        }
    ];
    $scope.ApplyColorAxis = function (gradientPoints) {
        var stops = [];
        // parse gradient points
        angular.forEach(gradientPoints, function (value, key) {
            stops.push([
                gradientPoints[key].position,
                gradientPoints[key].color
            ]);
        });
        console.log(stops);
        console.log($scope.graphdata);
        $scope.graphdata.colorAxis.stops = stops;
    };

    // Creates The title of the modal
    $scope.CreateModalTitle = function () {
        //Creates the Modal Title depending on callstate [update || create]
        switch (callstate) {
            case "create": $scope.modalTitle = "Create your Heatmap Widget"; break;
            case "update": $scope.modalTitle = "Reconfigure your Heatmap Widget"; break;
            default: $scope.modalTitle = "You did something wrong.";
        }
        $scope.modalSubtitle = $scope.WizardSteps[0].tooltip;

        //Initializes the validationHistory from number of steps existing in WizardSteps
        angular.forEach($scope.WizardSteps, function (o, i) {
            $scope.validationHistory.push(false);
        });
        $scope.validationHistory[1] = true;
    }

    $scope.validationHistory = [];
    $scope.wizard = {
        currStep: 1,
        nextValid: false,
        advanced: false,
        load: false
    }

    $scope.toggleFlags = []
    $scope.ToggleFlag = function (index) {
        $scope.toggleFlags[index] = !$scope.toggleFlags[index];
    }

    $scope.chartTypes = [{
        name: "Normal",
        value: 'normal',
        disabled: false,
    },{
        name: "Varying Size",
        value: "varying size",
        disabled: true,
    }];

    // $scope.stackingType = [{ name: 'None', value: '' }]

    $scope.dataSelectTable = {
        col: 5,
        row: 5,
        colpage: 0,
        rowpage: 0,
        OpenFilter: function ($mdOpenMenu, ev) {
            originatorEv = ev;
            $mdOpenMenu(ev);
        },
        AddColumn: function () {
            this.col += 1;
        },
        AddRow: function () {
            this.row += 1;
        },
        MinusColumn: function () {
            this.col -= 1;
        },
        MinusRow: function () {
            this.row -= 1;
        }
    }

    $scope.customGraphTable = {
        header: ['color'],     //
        col: 5,
        row: 5,
        colpage: 0,
        rowpage: 0,
        OpenFilter: function ($mdOpenMenu, ev) {
            originatorEv = ev;
            $mdOpenMenu(ev);
        },
        AddColumn: function () {
            this.col += 1;
        },
        AddRow: function () {
            this.row += 1;
        },
        MinusColumn: function () {
            this.col -= 1;
        },
        MinusRow: function () {
            this.row -= 1;
        }
    }

    //Variable for Plot Band Mgt
    $scope.plotBand = {
        axis: 'x',
        rotation: 0,
        from: 0,
        to: 0,
        color: "#CCC",
        text: "Sample Plot Band",

        //defaults
        textAlign: 'center',
    }

    //Variable for Plot Line Mgt
    $scope.plotLine = {
        value: 0,
        width: 1,
        axis: 'x',
        color: "#CCC",
        dashStyle: 'Solid',
        text: 'Sample PlotLine',
        verticalAlign: 'Top',                 //top-middle-bottom,
        rotation: 0,

        //defaults
        textAlign: 'center',
        align: 'center'
    }

    $scope.CustomGraphSettings = [
        { name: "Graph Colors", active: true, id: 'color' },
        { name: "Line Width", active: false, id: 'lineWidth' },
        { name: "Line Style", active: false, id: 'dashStyle' },
        { name: "Marker Symbol", active: false, id: 'symbol' },
        { name: "Marker Radius", active: false, id: 'radius' },
    ];
    /*************************************************************************/
    /******                 IMPORTANT VARIABLES                          *****/
    /*************************************************************************/
    $scope.refreshInfo = {
        //Basic Users
        url: "json/rdata.php",     //[S1]
        method: "GET",             //[S1]

        interval: {                 //[S2]
            type: 'Seconds',
            unit: 1,
            value: 1000
        },

        //Advanced Users
        parameters: {},          //[S1] - json for post params

        //Identified from response of url
        type: "tabular",        //[tabular, multilevel]
    }

    $scope.widgetInfo = {
        //Basic Users
        name: "",               //[S2] - name of widget

        //Identified from menu
        type: "chart",            //['line','bar','bubble','map']

        //Advanced Users
        header: false,           //[S2] - enable header
        hardRefresh: false,      //[S2] - Hard Refresh button visibility

        //Default from GridStack
        height: 18,              //[GS] - widget height
        width: 6,               //[GS] - widget width
        x: 0,                   //[GS] - x-position
        y: 0,                   //[GS] - y-position
    }

    //Used for Parse Series
    $scope.tabularInfo = {
        //Basic Users
        label: "",          //[S3] - main key label
        rows: [],           //[S3] - row indices
        columns: [],        //[S3] - column keys
        //                              - bubble/scatter/markermap - [x,y,z]
        //                              - bar/line - array of keys
        color: [],
    }

    /*
        results of parsed-multilevelInfo and parsed-tabularInfo should fit:
            - chartInfo's series
            - table's series
            - stoplight's series
    */

    $scope.chartInfo = {
        stacking: "",
        type: "heatmap",
        heatmapType: "normal",
        id: "hcid",
        // colorAxis: {
        //     stops: [
        //         [0, "#000000"],
        //         [1, "#ffffff"]
        //     ]
        // },
        colorAxis: {
            type: "gradient",
            gradientInfo: {
                minEnabled: false,
                maxEnabled: false,
                min: 0,
                max: 100,
                stops: [
                {
                    position: 0,
                    color: "#EFEFFF",
                },{
                    position: 50,
                    color: "#102D4C",
                },{
                    position: 100,
                    color: "#01a892",
                }],
            },
            categorizedInfo: {
                nameEnabled: false,
                colorOption: "minMax",
                dataClasses:[{
                    name: "Low",
                    from: null,
                    to: 40,
                    color: "red",
                },{
                    name: "Medium",
                    from: 40,
                    to: 70,
                    color: "yellow",
                },{
                    name: "High",
                    from: 70,
                    to: null,
                    color: "#01a892",
                }],
                minColor: "#EFEFFF",
                maxColor: "#102D4C",
            }
        },
        categories: [],
        plotBands: {
            x: [],
            y: []
        },
        plotLines: {
            x: [],
            y: []
        }
    }

    $scope.AddColorStop = function () {
        $scope.chartInfo.colorAxis.gradientInfo.stops.push({
            position: 100,
            color: "#01a892"
        });
        $scope.GenerateHighchart();
    };
    $scope.RemoveColorStop = function (o) {
        if ($scope.chartInfo.colorAxis.gradientInfo.stops.length > 2) {
            var i = $scope.chartInfo.colorAxis.gradientInfo.stops.indexOf(o);
            $scope.chartInfo.colorAxis.gradientInfo.stops.splice(i, 1);
            $scope.GenerateHighchart();
        }
    }
    $scope.AddDataClass = function () {
        $scope.chartInfo.colorAxis.categorizedInfo.dataClasses.push({
            name: "",
            from: null,
            to: null,
            color: "#01a892",
        });
        $scope.GenerateHighchart();
    }
    $scope.RemoveDataClass = function (o) {
        if ($scope.chartInfo.colorAxis.categorizedInfo.dataClasses.length > 1){
            var i = $scope.chartInfo.colorAxis.categorizedInfo.dataClasses.indexOf(o);
            $scope.chartInfo.colorAxis.categorizedInfo.dataClasses.splice(i, 1);
            $scope.GenerateHighchart();
        }
    }
    $scope.ToMS = function (interval, type) {
        //Time Converter
        var converted;
        switch (type) {
            case "Second":
            case "Seconds":
                converted = interval * 1000;
                break;
            case "Minute":
            case "Minutes":
                converted = interval * 60000;
                break;
            case "Hour":
            case "Hours":
                converted = interval * 3600000;
                break;
        }
        return converted;
    }
    /*************************************************************************/
    /******                 IMPORTANT VARIABLES                          *****/
    /*************************************************************************/

    //Step On Change
    $scope.OnChangeStepOne = function () {
        $scope.validationHistory[0] = false;
        $scope.wizard.nextValid = false;
    }
    $scope.OnChangeStepTwo = function (form) {
        if (!$scope.widgetInfo.header) {
            $scope.widgetInfo.name = "";
            if (form.$valid)
                $scope.validationHistory[1] = true;
        }
        else if ($scope.widgetInfo.name != '' && form.$valid)
            $scope.validationHistory[1] = true;
        else
            $scope.validationHistory[1] = false;
        $scope.ValidateStep($scope.validationHistory[1]);
    }
    $scope.OnChangeStepThree = {
        ChangeDataKey: function (val) {
            $scope.tabularInfo.label = val;
            $scope.GenerateHighchart();
        }
    }

    //Step Resets
    $scope.ResetStepOne = function () {
        $scope.toggleFlags = [false, false];
        $scope.ValidateStep($scope.validationHistory[0]);
    }
    $scope.ResetStepTwo = function () {
        $scope.toggleFlags = [false, false, false];
        $scope.wizard.advanced = $scope.widgetInfo.header;
        $scope.ValidateStep($scope.validationHistory[1]);
    }

    //Wizard Navigator
    $scope.ChangeStep = function (id) {
        if ($scope.wizard.currStep > id || $scope.wizard.nextValid) {// 
            $scope.wizard.currStep = id;
            $scope.wizard.advanced = false;
            $scope.modalSubtitle = $scope.WizardSteps[($scope.wizard.currStep - 1)].tooltip;
            angular.forEach($scope.WizardSteps, function (o) {
                if (o.id < id) {
                    o.done = true;
                    $scope.ValidateStep(false);
                }
                else {
                    o.done = false;
                }
            })
            switch ($scope.wizard.currStep - 1) {
                case 0: $scope.ResetStepOne(); break;
                case 1: $scope.ResetStepTwo(); break;
                case 2: setTimeout(function () { $scope.OnChangeStepThree.ChangeDataKey($scope.tabularInfo.label); $scope.val = $scope.tabularInfo.label; }, 500); break;
                case 3: setTimeout(function () { $scope.GenerateHighchart(); }, 500); break;
                case 4: setTimeout(function () { $scope.GenerateHighchart(); }, 500); break;
                default: break;
            }
        }
    }
    $scope.ValidateStep = function (valid) {
        $scope.wizard.nextValid = valid;
    }
    $scope.ToggleAdvanced = function () {
        $scope.wizard.advanced = !$scope.wizard.advanced;
    }

    //Index Checkers
    $scope.GetIndexOf = function (o) {
        //Determines o's index in raw data
        return $scope.originalData.indexOf(o);
    }
    $scope.GetGraphIndexOf = function (o) {
        //Determines o's index in processed data of selected rows
        return $scope.tabularInfo.rows.indexOf(o);
    }

    $scope.CustomGraphHeadToggle = function (o) {
        var i = $scope.customGraphTable.header.indexOf(o.id);
        var ii = $scope.CustomGraphSettings.indexOf(o);
        $scope.CustomGraphSettings[ii].active = !$scope.CustomGraphSettings[ii].active;
        if (i != -1) {
            $scope.customGraphTable.header.splice(i);
        } else {
            $scope.customGraphTable.header.push(i);
        }
    }

    //Togglers
    $scope.ChangeDataKey = function (key) {
        //Change label name for graph plotting
        $scope.tabularInfo.columns = [];
        $scope.tabularInfo.rows = [];
        $scope.tabularInfo.label = key;
        $scope.GenerateHighchart();
        //if ($scope.tabularInfo.label == '') {
        //    $scope.tabularInfo.label = key;
        //    $scope.originalDataKeys.splice($scope.originalDataKeys.indexOf(key), 1)
        //} else {
        //    $scope.originalDataKeys.splice($scope.originalDataKeys.indexOf(key), 1)
        //    $scope.originalDataKeys.push($scope.tabularInfo.label);
        //    $scope.tabularInfo.label = key;
        //}
    }
    $scope.CheckSelectedData = function (obj) {
        //Checks if obj is existing in selected rows
        if ($scope.tabularInfo.rows.indexOf(obj) == -1) return false;
        else return true;
    }
    $scope.ToggleSelectedData = function (obj) {
        //Push|Pop obj in|from selected rows
        var key = $scope.tabularInfo.rows.indexOf(obj);
        if (key == -1) {
            $scope.tabularInfo.rows.push(obj);
            $scope.tabularInfo.color.push("");
        }
        else {
            $scope.tabularInfo.rows.splice(key, 1);
            $scope.tabularInfo.color.splice(key, 1);
        }
        $scope.GenerateHighchart();
    }
    $scope.CheckSelectedKey = function (obj) {
        //Checks if obj is existing in selected columns
        if ($scope.tabularInfo.columns.indexOf(obj) == -1) return false;
        else return true;
    }
    $scope.ToggleSelectedKey = function (obj) {
        //Push|Pop obj in|from selected columns
        var key = $scope.tabularInfo.columns.indexOf(obj);
        if (key == -1) {
            $scope.tabularInfo.columns.push(obj);
        }
        else {
            $scope.tabularInfo.columns.splice(key, 1);
        }
        $scope.GenerateHighchart();
    }

    //Step One Submit
    $scope.ValidateURL = function (form) {
        $scope.originalData = {};
        $scope.originalDataKeys = {};
        $scope.wizard.load = true;
        try {
            DataFactory.GetData($scope.refreshInfo.url, $scope.refreshInfo.method).then(
                function successCallback(response) {
                    $scope.originalData = response.data;
                    $scope.originalDataKeys = Object.keys(response.data[0]);
                    $scope.wizard.load = false;
                    form.url.$invalid = false;
                    form.url.$valid = true;
                    $scope.ValidateStep(true);
                    $scope.validationHistory[0] = true;
                },
                function errorCallback(response) {
                    form.url.$invalid = true;
                    $scope.wizard.load = false;
                    $scope.ValidateStep(false);
                });
        } catch (e) {
            form.url.$invalid = true;
            $scope.wizard.load = false;
            $scope.ValidateStep(false);
        }
    }

    //Step Two Submit
    $scope.ValidateStepTwo = function (form) {
        if ($scope.widgetInfo.header && $scope.widgetInfo.name.length != 0) {
            $scope.ValidateStep(form.$valid);
        } else {
            $scope.widgetInfo.name.length = 0;
        }
    }

    //Graph Preview Generator
    $scope.GenerateHighchart = function () {
        if ($scope.tabularInfo.rows.length > 0 && $scope.tabularInfo.columns.length > 0) {
            $scope.chartInfo.categories = $scope.tabularInfo.columns;
            $scope.graphdata = DataFactory.Heatmap.GenerateTabularHighchartData($scope.chartInfo, $scope.tabularInfo, $scope.originalData);
            $scope.graphdata.series = DataFactory.Heatmap.GenerateTabularRawSeries($scope.refreshInfo, $scope.tabularInfo, $scope.originalData);
            $scope.ValidateStep(true);
        }
    }

    //Closes the modal
    $scope.CloseModal = function () {
        $mdDialog.hide();
    }



    //GUYS ITO NA YUNG PANG CREATE NG WIDGET. NAIIYAK AKO HUHU
    $scope.AddWidget = function () {
        $scope.refreshInfo.interval.value = $scope.ToMS($scope.refreshInfo.interval.unit, $scope.refreshInfo.interval.type);

        console.log($scope.refreshInfo.interval.unit);
        console.log($scope.refreshInfo.interval.type);
        console.log($scope.refreshInfo.interval.value);

        $mdDialog.hide({
            refreshInfo: $scope.refreshInfo,
            widgetInfo: $scope.widgetInfo,
            tabularInfo: $scope.tabularInfo,
            chartInfo: $scope.chartInfo,
        });
    }

    //Auto Calls
    $scope.CreateModalTitle();
})
.filter('startFrom', function () {
    return function (input, start) {
        start = +start; //parse to int
        return input.slice(start);
    }
})
.filter('roundup', function () {
    return function (value) {
        return Math.ceil(value);
    };
})